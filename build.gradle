plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.9.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

if (hasProperty("buildScan")) {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

static def determineVersion(String defaultVersion) {
    def envVersion = System.getenv("VERSION")
    return envVersion == null ? defaultVersion : envVersion
}

group = "dev.mikchan.mcnp"
version = determineVersion("0.0.1")

repositories {
    mavenCentral()

    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }

    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        name = "aikar"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"

    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"
    shadow "co.aikar:acf-paper:0.5.1-SNAPSHOT"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

shadowJar {
    archiveClassifier.set(null)

    dependencies {
        include(dependency("co.aikar:acf-paper"))
    }

    relocate "co.aikar.commands", "dev.mikchan.mcns.utility.shadow.co.aikar.commands"
    relocate "co.aikar.locales", "dev.mikchan.mcns.utility.shadow.co.aikar.locales"
}
